{-# STDLIB_VERSION 6 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}

let hours = 24
let minutes = 60

func tryGetInteger (key:String) = match getInteger(this, key) {
    case b: Int => b
    case _ => 0
}

func tryGetString (key:String) = match getString(this, key) {
    case b: String => b
    case _ => ""
}

func getAssetString (assetId:ByteVector|Unit) = match assetId {
    case b: ByteVector => toBase58String(b)
    case _ =>  "WAVES"
}

func getAssetBytes (assetIdStr:String) = if (assetIdStr == "WAVES") then unit else fromBase58String(assetIdStr)


func payBoostingResult (boostingId:String) = {
    let lastHeight = tryGetInteger("boosting_" + boostingId + "_lastHeight")
    let finishHeight = tryGetInteger("boosting_" + boostingId + "_finishHeight")

    if (lastHeight != 0 && finishHeight > lastHeight) then {
        let blockReward = tryGetInteger("boosting_" + boostingId + "_totalAmount") / (tryGetInteger("boosting_" + boostingId + "_days") * hours * minutes)
        let toPay = fraction(min([finishHeight, height]) - lastHeight, blockReward, 1)  

        [
            IntegerEntry("boosting_" + boostingId + "_lastHeight", height), 
            ScriptTransfer(addressFromStringValue(tryGetString("boosting_"+boostingId+"_poolId")), toPay, getAssetBytes(tryGetString("boosting_"+boostingId+"_assetId")))
        ]
    }
    else []
}


@Callable(i)
func addBoosting (poolId: String, days: Int) = {
    let fullAmount = i.payments[0].amount
    let assetId = getAssetString(i.payments[0].assetId)
    let boostingId = sha256((i.transactionId.toBase58String() + assetId + poolId).fromBase58String()).toBase58String()

    if (days < 1) then throw("amount of days has to be between 1 and 365") 
    else if (days > 365) then throw("amount of days has to be between 1 and 365") 
    else if (tryGetInteger("boosting_" + boostingId + "_days") != 0) then throw("split addBoosting calls to multiple invokes")
    else if (fullAmount / days < 1440) then throw((("boosting amount too small, minimum is " + toString((1440 * days)) + " of the smallest unit of payment asset")))
    else if (addressFromString(poolId) == unit) then throw("incorrect pool address")
    else {
        let poolBoostings = tryGetString("pool_" + poolId + "_boostings").split(",")

        [
            IntegerEntry("boosting_" + boostingId + "_days", days), 
            IntegerEntry("boosting_" + boostingId + "_totalAmount", fullAmount), 
            IntegerEntry("boosting_" + boostingId + "_dailyAmount", (fullAmount / days)), 
            #IntegerEntry((("boosting_" + boostingId) + "_blockAmount"), (fullAmount / ((days * hours) * minutes))), 
            IntegerEntry("boosting_" + boostingId + "_startHeight", height), 
            IntegerEntry("boosting_" + boostingId + "_finishHeight", (height + ((days * hours) * minutes))), 
            IntegerEntry("boosting_" + boostingId + "_finishTimestamp", (lastBlock.timestamp + ((((days * hours) * minutes) * 60) * 1000))), 
            IntegerEntry("boosting_" + boostingId + "_lastHeight", height), 
            StringEntry("boosting_" + boostingId + "_assetId", assetId), 
            StringEntry("boosting_" + boostingId + "_owner", toString(i.caller)), 
            StringEntry("boosting_" + boostingId + "_poolId", poolId), 
            StringEntry("pool_" + poolId + "_boostings", tryGetString("pool_" + poolId + "_boostings") + boostingId + ",")
        ]
    }
}


@Callable(i)
func polishFinishedBoostings(poolId: String) = {
    func checkNextBoosting(accum: List[String], boostingId: String) = {
        if (boostingId == "") || (accum.indexOf(boostingId) != unit) then accum 
        else {
            let finishHeight = tryGetInteger("boosting_" + boostingId + "_finishHeight")
            if (finishHeight > height) then {
                accum ++ [boostingId]
            } else {
                accum
            }
        }
    }

    let currentBoostings = tryGetString("pool_" + poolId + "_boostings").split_51C(",")
    let newBoostings = (FOLD<25>(currentBoostings, [], checkNextBoosting)).makeString_11C(",") + ","
    
    [
        if newBoostings == "," then DeleteEntry("pool_" + poolId + "_boostings") else StringEntry("pool_" + poolId + "_boostings", newBoostings)
    ]
}


@Callable(i)
func payBoosting(boostingId:String) = {
    payBoostingResult(boostingId)
}


@Callable(i)
func payPoolBoostings(poolId:String) = {
    func f (accum: List[ScriptTransfer|IntegerEntry], boostingId: String) = {accum ++ payBoostingResult(boostingId)}

    let boostings = tryGetString("pool_" + poolId + "_boostings").split_51C(",")
    strict payments = FOLD<25>(boostings, [], f)

    strict inv = invoke(this, "polishFinishedBoostings", [poolId], [])

    payments
}


@Callable(i)
func payBoostings(poolIds: String) = {
    func f (accum: Int, poolId: String) = {
        strict in = invoke(this, "payPoolBoostings", [poolId], [])
        0
    }

    strict invokes = FOLD<25>(poolIds.split_51C(","), 0, f)

    []
}

