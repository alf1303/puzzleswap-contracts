{-# STDLIB_VERSION 6 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}


let li

let hours = 24
let minutes = 60

func tryGetInteger (key:String) = match getInteger(this, key) {
    case b: Int => 
        b
    case _ => 
        0
}

func tryGetString (key:String) = match getString(this, key) {
    case b: String => 
        b
    case _ => 
        ""
}

func getAssetString (assetId:ByteVector|Unit) = match assetId {
    case b: ByteVector => 
        toBase58String(b)
    case _ => 
        "WAVES"
}

func getAssetBytes (assetIdStr:String) = if ((assetIdStr == "WAVES"))
    then unit
    else fromBase58String(assetIdStr)

func payBoostingResult (boostingId:String) = {
    let lastHeight = tryGetInteger((("boosting_" + boostingId) + "_lastHeight"))
    let finishHeight = tryGetInteger((("boosting_" + boostingId) + "_finishHeight"))
    if (if ((lastHeight != 0))
        then (finishHeight > lastHeight)
        else false)
        then {
            let blockReward = tryGetInteger((("boosting_" + boostingId) + "_totalAmount")) / ((tryGetInteger(("boosting_" + boostingId) + "_days") * hours * minutes))
            let toPay = fraction((min([finishHeight, height]) - lastHeight), blockReward, 1)

            let getFinishedPoolId = tryGetString((("boosting_" + boostingId) + "_poolId"))
            let getPoolBoostings =  tryGetString(("pool_" + getFinishedPoolId) + "_boostings")
            let sizeStr = size(getPoolBoostings)
            let findIndex = value(indexOf(getPoolBoostings, boostingId))
            let modifierLeft = if findIndex == 0 then 0 else 1
            let modifierRight = if findIndex == 0 then 2 else 1
            let leftStr = take(getPoolBoostings, sizeStr - (sizeStr - findIndex + modifierLeft))
            let rightStr = takeRight(getPoolBoostings, sizeStr - (findIndex + modifierRight))
            let openBoostingsIds = leftStr + rightStr            
            [
            IntegerEntry((("boosting_" + boostingId) + "_lastHeight"), height), 

            ScriptTransfer(
              addressFromStringValue(tryGetString("boosting_"+boostingId+"_poolId")), 
              toPay, 
              getAssetBytes(tryGetString("boosting_"+boostingId+"_assetId"))),

            StringEntry((("pool_" + getFinishedPoolId) + "_boostings"),
              if (height < finishHeight) 
              then tryGetString((("pool_" + getFinishedPoolId) + "_boostings")) 
              else openBoostingsIds)
            ]
            }
        else nil
    }


@Callable(i)
func addBoosting (poolId: String, days: Int) = {
    let fullAmount = i.payments[0].amount

    if (days < 1) then throw("amount of days has to be between 1 and 365") 
    else if (days> 365) then throw("amount of days has to be between 1 and 365") 
    else if (fullAmount / days < 1440) then throw((("boosting amount too small, minimum is " + toString((1440 * days)) + " of the smallest unit of payment asset")))
    else if ((addressFromString(poolId) == unit)) then throw("incorrect pool address")
    else {
        let assetId = getAssetString(i.payments[0].assetId)
        let poolBoostings = tryGetString("pool_" + poolId + "_boostings").split(",")

        strict entry = if (size(poolBoostings) >= 5) then throw("max 5 boosts per pool") else invoke(this, "entryEnded", [], [])
        let boostingId = if size(("list ongoing boosts " + toString(height)) + " boostingIds") > 112 then throw("wait till other boosts are finished") else take(tryGetString(("list ended " + toString(height)) + " boostingIds"), 1)
        [
            IntegerEntry("boosting_" + boostingId + "_days", days), 
            IntegerEntry("boosting_" + boostingId + "_totalAmount", fullAmount), 
            IntegerEntry("boosting_" + boostingId + "_dailyAmount", (fullAmount / days)), 
            #IntegerEntry((("boosting_" + boostingId) + "_blockAmount"), (fullAmount / ((days * hours) * minutes))), 
            IntegerEntry("boosting_" + boostingId + "_startHeight", height), 
            IntegerEntry("boosting_" + boostingId + "_finishHeight", (height + ((days * hours) * minutes))), 
            IntegerEntry("boosting_" + boostingId + "_finishTimestamp", (lastBlock.timestamp + ((((days * hours) * minutes) * 60) * 1000))), 
            IntegerEntry("boosting_" + boostingId + "_lastHeight", height), 
            StringEntry("boosting_" + boostingId + "_assetId", assetId), 
            StringEntry("boosting_" + boostingId + "_owner", toString(i.caller)), 
            StringEntry("boosting_" + boostingId + "_poolId", poolId), 
            StringEntry("pool_" + poolId + "_boostings", ((tryGetString((("pool_" + poolId) + "_boostings")) + boostingId) + ","))
        ]
    }
}


@Callable(i)
func payBoosting (boostingId:String) = {
    payBoostingResult(boostingId)
}


@Callable(i)
func payBoostings () = {
    func f (accum: Int, next: String) = {
        strict in = invoke(this, "payBoosting", [next], [])
        0
    }
    strict payments = FOLD<56>(li, 0, f)
    []
}


@Callable(i)
func addToEndedBoostings(boostingId: String) = {
    let lastHeight = tryGetInteger("boosting_" + boostingId + "_lastHeight")
    let finishHeight = tryGetInteger("boosting_" + boostingId + "_finishHeight")

    if (finishHeight <= lastHeight) then {
        [
            StringEntry("list ended " + toString(height) + " boostingIds", tryGetString("list ended " + toString(height) + " boostingIds" + boostingId) + ",")
        ]
    }
    else {
        [
            StringEntry("list ongoing boosts " + toString(height) + " boostingIds", tryGetString("list ongoing boosts " + toString(height)) + " boostingIds" + boostingId + ",")
        ]
    }
}


@Callable(i)
func entryEnded () = {
    func f (accum: Int, next: String) = {
        strict in = invoke(this, "addToEndedBoostings", [next], nil)
        0
    }

    strict endedBoostingId = FOLD<56>(li, 0, f)

    ([
        IntegerEntry("height", height)
    ], endedBoostingId)
}
